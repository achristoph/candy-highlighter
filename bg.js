// Generated by CoffeeScript 1.4.0
(function() {
  var Candy, avg, best_color, candies_in_grid, capture, compNum, compScore, h, mark, matches, median, n_columns, n_rows, pxh, pxw, screen_init, w, _gaq;

  _gaq = _gaq || [];

  _gaq.push(['_setAccount', 'UA-41315960-1']);

  _gaq.push(['_trackPageview']);

  (function() {
    var ga, s;
    ga = document.createElement('script');

    ga.type = 'text/javascript';
    ga.async = true;
    ga.src = 'https://stats.g.doubleclick.net/dc.js';
    s = document.getElementsByTagName('script')[0];
    return s.parentNode.insertBefore(ga, s);
  })();

  pxw = 72;

  pxh = 64;

  n_rows = 9;

  n_columns = 9;

  w = 756;

  h = 756;

  candies_in_grid = [];

  Candy = (function() {

    function Candy(color, row, col, rgb, is_matched, type, candy_type) {
      this.color = color;
      this.row = row;
      this.col = col;
      this.rgb = rgb;
      this.is_matched = is_matched;
      this.type = type;
      this.candy_type = candy_type;
    }

    return Candy;

  })();

  best_color = function(r, g, b, row, col) {
    var b1, best_match, bg, blue, blue_caged, blue_stripped, cherry, color, colors, distance, g1, gray, green, green_caged, green_stripped, nut, orange, orange_caged, orange_stripped, purple, purple_caged, purple_stripped, r1, red, red_caged, red_stripped, sim_scores, sum_of_squares, yellow, yellow_caged, yellow_stripped, _i, _len, _ref;
    green = [50, 171, 1, 'G'];
    blue = [42, 156, 255, 'B'];
    purple = [199, 31, 255, 'P'];
    yellow = [252, 200, 0, 'Y'];
    orange = [255, 142, 11, 'O'];
    red = [255, 1, 0, 'R'];
    nut = [203, 67, 33, 'N'];
    cherry = [119, 27, 30, 'c'];
    gray = [217, 226, 224, 'g'];
    bg = [92, 103, 125, 'bg'];
    red_stripped = [246, 39, 39, 'RS'];
    green_stripped = [115, 231, 84, 'GS'];
    blue_stripped = [31, 148, 240, 'BS'];
    purple_stripped = [218, 60, 250, 'PS'];
    yellow_stripped = [252, 195, 27, 'YS'];
    orange_stripped = [250, 191, 113, 'OS'];
    red_caged = [155, 8, 10, 'RC'];
    green_caged = [33, 97, 7, 'GC'];
    blue_caged = [];
    purple_caged = [163, 30, 221, 'PC'];
    yellow_caged = [190, 125, 10, 'YC'];
    orange_caged = [];
    colors = [green, blue, purple, yellow, orange, red, nut, cherry, gray, red_stripped, blue_stripped, orange_stripped, purple_stripped, green_stripped, yellow_stripped];
    sim_scores = [];
    for (_i = 0, _len = colors.length; _i < _len; _i++) {
      color = colors[_i];
      _ref = [color[0], color[1], color[2]], r1 = _ref[0], g1 = _ref[1], b1 = _ref[2];
      sum_of_squares = Math.pow(r1 - r, 2) + Math.pow(g1 - g, 2) + Math.pow(b1 - b, 2);
      distance = 1 / (1 + Math.sqrt(sum_of_squares));
      sim_scores.push([distance * 100, color[3]]);
    }
    best_match = sim_scores.sort(compScore)[sim_scores.length - 1];
    if (best_match[0] < 1.0) {
      return 'X';
    } else {
      return best_match[1];
    }
  };

  compScore = function(a, b) {
    return a[0] - b[0];
  };

  compNum = function(a, b) {
    return parseInt(a) - parseInt(b);
  };

  mark = function(matched_candies, type, msg) {
    var candy, _i, _len, _ref, _results;
    console.log(msg);
    _results = [];
    for (_i = 0, _len = matched_candies.length; _i < _len; _i++) {
      candy = matched_candies[_i];
      candy.is_matched = true;
      if (!candy.type) {
        _results.push(candy.type = type);
      } else if ((type === 'L' || type === 'T') && ((_ref = candy.type) === '3' || _ref === '4' || _ref === '5')) {
        _results.push(candy.type = type);
      } else if ((type === '3' || type === '4' || type === '5') && parseInt(type) > parseInt(candy.type)) {
        _results.push(candy.type = type);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  median = function(arr) {
    var l;
    l = arr.length;
    return arr.sort(compNum)[Math.round(l / 2)];
  };

  avg = function(arr) {
    var c, l, sum, _i, _len;
    l = arr.length;
    sum = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      c = arr[_i];
      sum += c;
    }
    return sum / l;
  };

  screen_init = function() {
    chrome.windows.getCurrent(function(w) {
      if (w.width > 1056) {
        return chrome.windows.update(w.id, {
          width: 1056
        }, function() {
          return console.log("window resize");
        });
      }
    });
    return chrome.tabs.getSelected(function(tab) {
      chrome.tabs.insertCSS(tab.id, {
        file: 'page.css'
      });
      return chrome.tabs.executeScript(tab.id, {
        file: 'jquery-1.9.1.min.js'
      }, function() {
        return chrome.tabs.executeScript(tab.id, {
          file: 'page.js'
        });
      });
    });
  };

  capture = function(scroll_pos, callback) {
    var canvas, ctx, sx, sy, view;
    view = chrome.extension.getBackgroundPage();
    canvas = view.document.getElementById('canvas');
    ctx = canvas.getContext('2d');
    canvas.width = w;
    canvas.height = h;
    sx = 108 - scroll_pos[0];
    sy = 180 - scroll_pos[1];
    return chrome.tabs.captureVisibleTab(function(screenshot) {
      var img;
      img = new Image();
      img.src = screenshot;
      return img.onload = function() {
        var ab, ag, ar, b, bc, c, candies_in_row, col, e, g, i, pixel, r, rgb, row, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2;
        ctx.drawImage(img, sx, sy, w - sx, h - sy, 0, 0, w - sx, h - sy);
        candies_in_grid = [];
        candies_in_row = [];
        for (row = _i = 0, _ref = n_rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
          for (col = _j = 0, _ref1 = n_columns - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            x = (pxw / 2) + pxw * col;
            y = (pxh / 2) + pxh * row;
            pixel = ctx.getImageData(x, y, 15, 15);
            rgb = pixel.data;
            ar = (function() {
              var _k, _ref2, _results;
              _results = [];
              for (i = _k = 0, _ref2 = rgb.length - 1; _k <= _ref2; i = _k += 4) {
                _results.push(parseInt(rgb[i]));
              }
              return _results;
            })();
            ag = (function() {
              var _k, _ref2, _results;
              _results = [];
              for (i = _k = 1, _ref2 = rgb.length - 1; _k <= _ref2; i = _k += 4) {
                _results.push(parseInt(rgb[i]));
              }
              return _results;
            })();
            ab = (function() {
              var _k, _ref2, _results;
              _results = [];
              for (i = _k = 2, _ref2 = rgb.length - 1; _k <= _ref2; i = _k += 4) {
                _results.push(parseInt(rgb[i]));
              }
              return _results;
            })();
            _ref2 = [median(ar), median(ag), median(ab)], r = _ref2[0], g = _ref2[1], b = _ref2[2];
            bc = best_color(r, g, b, row, col);
            if (bc === 'RS') {
              e = new Candy('R', row, col, [r, g, b]);
              e.candy_type = 'S';
            } else if (bc === 'GS') {
              e = new Candy('G', row, col, [r, g, b]);
              e.candy_type = 'S';
            } else if (bc === 'OS') {
              e = new Candy('O', row, col, [r, g, b]);
              e.candy_type = 'S';
            } else if (bc === 'BS') {
              e = new Candy('B', row, col, [r, g, b]);
              e.candy_type = 'S';
            } else if (bc === 'PS') {
              e = new Candy('P', row, col, [r, g, b]);
              e.candy_type = 'S';
            } else {
              e = new Candy(bc, row, col, [r, g, b]);
            }
            candies_in_row.push(e);
          }
          candies_in_grid.push(candies_in_row);
          candies_in_row = [];
        }
        for (_k = 0, _len = candies_in_grid.length; _k < _len; _k++) {
          row = candies_in_grid[_k];
          console.log((function() {
            var _l, _len1, _results;
            _results = [];
            for (_l = 0, _len1 = row.length; _l < _len1; _l++) {
              c = row[_l];
              _results.push(c.color);
            }
            return _results;
          })());
        }
        matches(candies_in_grid);
        if (callback) {
          return callback();
        }
      };
    });
  };

  chrome.runtime.onMessage.addListener(function(request, sender, response) {
    var resp;
    if (request.msg === 'done') {
      resp = function() {
        response({
          bg: candies_in_grid
        });
        return console.log(candies_in_grid);
      };
      capture(request.scroll_pos, resp);
    }
    return true;
  });

  chrome.browserAction.onClicked.addListener(screen_init);

  matches = function(a) {
    var c, cols, i, j, rows, _i, _ref, _results;
    rows = a.length;
    _results = [];
    for (i = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _ref2, _results1;
        _results1 = [];
        for (j = _j = 0, _ref1 = a[i].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          cols = a[i].length;
          c = a[i][j];
          try {
            if ((_ref2 = c.color) === 'R' || _ref2 === 'G' || _ref2 === 'B' || _ref2 === 'P' || _ref2 === 'Y' || _ref2 === 'O') {
              if (j + 2 < cols && i - 1 >= 0 && c.color === a[i - 1][j + 1].color && c.color === a[i][j + 2].color && a[i][j + 1].color !== 'g') {
                mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i - 1][j + 1]], '3', "3 horizontal in a row on middle above");
              }
              if (j + 2 < cols && i + 1 < rows && c.color === a[i + 1][j + 1].color && c.color === a[i][j + 2].color && a[i][j + 1].color !== 'g') {
                mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i + 1][j + 1]], '3', "3 horizontal in a row on middle below");
              }
              if (i + 2 < rows && j + 1 < cols && c.color === a[i + 2][j].color && c.color === a[i + 1][j + 1].color && a[i + 1][j].color !== 'g') {
                mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 1][j + 1]], '3', "3 vertical in a row on middle right");
              }
              if (i + 2 < rows && j - 1 >= 0 && c.color === a[i + 2][j].color && c.color === a[i + 1][j - 1].color && a[i + 1][j].color !== 'g') {
                mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 1][j - 1]], '3', "3 vertical in a row on middle left");
              }
              if (i + 1 < rows && c.color === a[i + 1][j].color) {
                if (i + 3 < rows && c.color === a[i + 3][j].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 3][j]], '3', "3 vertical in a row on below");
                }
                if (i + 2 < rows && j + 1 < cols && c.color === a[i + 2][j + 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 2][j + 1]], '3', "3 vertical in a row on right below");
                }
                if (i + 2 < rows && j - 1 >= 0 && c.color === a[i + 2][j - 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 2][j - 1]], '3', "3 vertical in a row on left below");
                }
                if (i - 2 >= 0 && c.color === a[i - 2][j].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 1][j], a[i][j], a[i + 1][j], a[i - 2][j]], '3', "3 vertical in a row on above");
                }
                if (i - 1 >= 0 && j - 1 >= 0 && c.color === a[i - 1][j - 1].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 1][j], a[i][j], a[i + 1][j], a[i - 1][j - 1]], '3', "3 vertical in a row on above left");
                }
                if (i - 1 >= 0 && j + 1 < cols && c.color === a[i - 1][j + 1].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 1][j], a[i][j], a[i + 1][j], a[i - 1][j + 1]], '3', "3 vertical in a row on above right");
                }
                if (i + 3 < rows && j + 1 < cols && c.color === a[i + 3][j].color && c.color === a[i + 2][j + 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 3][j], a[i + 2][j + 1]], '4', "4 vertical in a row on below right");
                }
                if (i + 3 < rows && j - 1 >= 0 && c.color === a[i + 3][j].color && c.color === a[i + 2][j - 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 3][j], a[i + 2][j - 1]], '4', "4 vertical in a row on below left");
                }
                if (i - 2 >= 0 && j + 1 < cols && c.color === a[i - 2][j].color && c.color === a[i - 1][j + 1].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 2][j], a[i - 1][j], a[i][j], a[i + 1][j], a[i - 1][j + 1]], '4', "4 vertical in a row on above right");
                }
                if (i - 2 >= 0 && j - 1 >= 0 && c.color === a[i - 2][j].color && c.color === a[i - 1][j - 1].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 2][j], a[i - 1][j], a[i][j], a[i + 1][j], a[i - 1][j - 1]], '4', "4 vertical in a row on above left");
                }
                if (j - 1 >= 0 && i + 4 < rows && c.color === a[i + 3][j].color && c.color === a[i + 4][j].color && c.color === a[i + 2][j - 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 3][j], a[i + 4][j], a[i + 2][j - 1]], '5', "5 vertical in a row a middle candy left");
                }
                if (i + 4 < rows && j + 1 < cols && c.color === a[i + 3][j].color && c.color === a[i + 4][j].color && c.color === a[i + 2][j + 1].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j], a[i + 3][j], a[i + 4][j], a[i + 2][j + 1]], '5', "5 vertical in a row a middle candy right");
                }
                if (j - 1 >= 0 && j + 1 < cols && i - 2 >= 0 && c.color === a[i - 1][j - 1].color && c.color === a[i - 1][j + 1].color && c.color === a[i - 2][j].color && a[i - 1][j].color !== 'g') {
                  mark([a[i - 1][j - 1], a[i - 1][j], a[i - 1][j + 1], a[i][j], a[i + 1][j], a[i + 3][j]], 'T', "T");
                }
                if (j - 1 >= 0 && j + 1 < cols && i + 3 < rows && c.color === a[i + 2][j - 1].color && c.color === a[i + 2][j + 1].color && c.color === a[i + 3][j].color && a[i + 2][j].color !== 'g') {
                  mark([a[i][j], a[i + 1][j], a[i + 2][j - 1], a[i + 2][j], a[i + 2][j + 1], a[i + 3][j]], 'T', "Upsidedown T");
                }
              }
              if (j + 1 < cols && c.color === a[i][j + 1].color) {
                if (j + 3 < cols && c.color === a[i][j + 3].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i][j + 3]], '3', "3 horizontal in a row on right");
                }
                if (i + 1 < rows && j + 2 < cols && c.color === a[i + 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i + 1][j + 2]], '3', "3 horizontal in a row on right below");
                }
                if (i - 1 >= 0 && j + 2 < cols && c.color === a[i - 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i - 1][j + 2]], '3', "3 horizontal in a row on right above");
                }
                if (j - 2 >= 0 && c.color === a[i][j - 2].color && a[i][j - 1].color !== 'g') {
                  mark([a[i][j - 1], a[i][j], a[i][j + 1], a[i][j - 2]], '3', "3 horizontal in a row on left");
                }
                if (i + 1 < rows && j - 2 >= 0 && c.color === a[i + 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i][j - 1], a[i][j], a[i][j + 1], a[i + 1][j - 1]], '3', "3 horizontal in a row on left below");
                }
                if (i - 1 >= 0 && j - 1 >= 0 && c.color === a[i - 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i][j - 1], a[i][j], a[i][j + 1], a[i - 1][j - 1]], '3', "3 horizontal in a row on left above");
                }
                if (i - 1 >= 0 && j + 3 < cols && c.color === a[i][j + 3].color && c.color === a[i - 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i][j + 3], a[i - 1][j + 2]], '4', "4 horizontal in a row on right above");
                }
                if (i + 1 < rows && j + 3 < cols && c.color === a[i][j + 3].color && c.color === a[i + 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i][j + 3], a[i + 1][j + 2]], '4', "4 horizontal in a row on right below");
                }
                if (i + 1 < rows && j - 2 >= 0 && c.color === a[i][j - 2].color && c.color === a[i + 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i][j - 2], a[i][j - 1], a[i][j], a[i][j + 1], a[i + 1][j - 1]], '4', "4 horizontal in a row on left below");
                }
                if (i - 1 >= 0 && j - 2 >= 0 && c.color === a[i][j - 2].color && c.color === a[i - 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i][j - 2], a[i][j - 1], a[i][j], a[i][j + 1], a[i - 1][j - 1]], '4', "4 horizontal in a row on left above");
                }
                if (i + 1 < rows && j + 4 < cols && c.color === a[i][j + 3].color && c.color === a[i][j + 4].color && c.color === a[i + 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i][j + 3], a[i][j + 4], a[i + 1][j + 2]], '5', "5 horizontal in a row a middle candy below");
                }
                if (i - 1 >= 0 && j + 4 < cols && c.color === a[i][j + 3].color && c.color === a[i][j + 4] && c === a[i - 1][j + 2] && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i][j + 3], a[i][j + 4], a[i - 1][j + 2]], '5', "5 horizontal in a row a middle candy above");
                }
                if (i - 2 >= 0 && j - 1 >= 0 && i + 1 < rows && c.color === a[i - 2][j - 1].color && c.color === a[i - 1][j - 1].color && c.color === a[i + 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i - 2][j - 1], a[i - 1][j - 1], a[i][j - 1], a[i][j], a[i][j + 1], a[i + 1][j - 1]], 'L', "L in a row below");
                }
                if (i - 2 >= 0 && j - 2 >= 0 && c.color === a[i - 2][j - 1].color && c.color === a[i - 1][j - 1].color && c.color === a[i][j - 2].color && a[i][j - 1].color !== 'g') {
                  mark([a[i - 2][j - 1], a[i - 1][j - 1], a[i][j - 1], a[i][j], a[i][j + 1], a[i][j - 2]], 'L', "L in a same row left");
                }
                if (i - 2 >= 0 && j + 2 < cols && c.color === a[i - 1][j + 2].color && c.color === a[i - 2][j + 2].color && c.color === a[i][j + 3].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i - 1][j + 2], a[i - 2][j + 2], a[i][j + 3]], 'L', "Reversed L in a same row right");
                }
                if (i - 2 >= 0 && j + 2 < cols && c.color === a[i - 1][j + 2].color && c.color === a[i - 2][j + 2].color && c.color === a[i + 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i - 1][j + 2], a[i - 2][j + 2], a[i + 1][j + 2]], 'L', "Reversed L in a row below");
                }
                if (i + 2 < rows && i - 1 >= 0 && j + 1 < cols && j - 1 >= 0 && c.color === a[i + 1][j - 1].color && c.color === a[i + 2][j - 1].color && c.color === a[i - 1][j - 1].color && a[i][j - 1].color !== 'g') {
                  mark([a[i + 2][j - 1], a[i + 1][j - 1], a[i][j - 1], a[i][j], a[i][j + 1], a[i - 1][j - 1]], 'L', "Upside-down L in a row above");
                }
                if (i + 2 < rows && j - 2 >= 0 && c.color === a[i + 1][j - 1].color && c.color === a[i + 2][j - 1].color && c.color === a[i][j - 2].color && a[i][j - 1].color !== 'g') {
                  mark([a[i + 2][j - 1], a[i + 1][j - 1], a[i][j - 1], a[i][j], a[i][j + 1], a[i][j - 2]], 'L', "Upside-down L in a same row left");
                }
                if (i - 1 >= 0 && i + 2 < rows && j + 2 < cols && c.color === a[i + 1][j + 2].color && c.color === a[i + 2][j + 2].color && c.color === a[i - 1][j + 2].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i + 1][j + 2], a[i + 2][j + 2], a[i - 1][j + 2]], 'L', "Upside-down reversed L in a row above");
                }
                if (i + 2 < rows && j + 3 < cols && c.color === a[i + 1][j + 2].color && c.color === a[i + 2][j + 2].color && c === a[i][j + 3] && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i][j + 2], a[i + 1][j + 2], a[i + 2][j + 2], a[i][j + 3]], 'L', "Upside-down reversed L in a same row right");
                }
                if (i - 1 >= 0 && i + 1 < rows && j + 3 < cols && c.color === a[i - 1][j + 2].color && c.color === a[i + 1][j + 2].color && c.color === a[i][j + 3].color && a[i][j + 2].color !== 'g') {
                  mark([a[i][j], a[i][j + 1], a[i - 1][j + 2], a[i][j + 2], a[i + 1][j + 2], a[i][j + 3]], 'T', "Right T");
                }
                if (i - 1 >= 0 && i + 1 < rows && j - 2 >= 0 && c.color === a[i - 1][j - 1].color && c.color === a[i + 1][j - 1].color && c.color === a[i][j - 2].color && a[i][j - 1].color !== 'g') {
                  _results1.push(mark([a[i - 1][j - 1], a[i][j - 1], a[i + 1][j - 1], a[i][j], a[i][j + 1], a[i][j - 2]], 'T', "Left T"));
                } else {
                  _results1.push(void 0);
                }
              } else {
                _results1.push(void 0);
              }
            } else {
              _results1.push(void 0);
            }
          } catch (error) {
            console.log(error);
            _results1.push(console.log("" + i + " " + j));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

}).call(this);
